<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">


<bean id="quoteCacheBean" class="com.demo.cache.QuoteCacheBean"/>

 
<bean id="planListingClientBean" class="com.demo.microserviceclient.PlanListingBean"/>
<bean id="planListingCacheBean" class="com.demo.cache.PlanListingCacheBean"/>
 
<bean id="planClientBean" class="com.demo.microserviceclient.PlanClientBean"/>
 
<bean id="quoteClientBean" class="com.demo.microserviceclient.QuoteClientBean"/>  
<bean id="agentClientBean" class="com.demo.microserviceclient.AgentClientBean"/>
<bean id="enrollmentClientBean" class="com.demo.microserviceclient.EnrollmentClientBean"/>
  
<bean id="MyAggregatorStrategy" class="com.demo.aggregation.strategy.MyStrategy"/>

<!-- define the gson data format, where we configure the data format using the properties -->
<bean id="gson" class="org.apache.camel.component.gson.GsonDataFormat">
    <!-- we want to unmarshal to person pojo -->
    <property name="unmarshalType" value="com.demo.model.Quote"/>
    
</bean>


  <camelContext xmlns="http://camel.apache.org/schema/spring">


	 <!-- <interceptSendToEndpoint uri="mock:getPlans">
        <log message="Intercepted!"/> 
      <to uri="mock:CheckResolveFromCache"/>
    </interceptSendToEndpoint> -->
 
 <interceptFrom uri="direct:PlanListingRoute">
 	<to uri="direct:CheckResolveFromCache"/>
 	
 	<log message="Header InCache contains ${header.InCache}"/>
 		<when>
            <simple>${header.InCache} contains 'Y'</simple>
            <log message="Skipped Target Route, Resolved From Cache."/>
            <stop/>
        </when>
		<log message="Cannot Resolve From Cache, Routing to target route..."/>
 </interceptFrom>
 
    <restConfiguration component="servlet" bindingMode="auto" contextPath="RoutesDemoProject/rest" port="8080">
      <dataFormatProperty key="prettyPrint" value="true"/>
    </restConfiguration>

    
<!--     <rest path="/quote" consumes="application/json"  produces="application/json">
      <description>Quote Workflow</description>
      
		<get uri="/{id}">
	        <description>Find Quote Details by Quote Reference Number</description>
	        <to uri="direct:QuoteDetailsRoute"/>
      	</get>
      	
      	<get uri="/agent/{id}">
	        <description>Find List of Quotes By Agent Id</description>
	        <to uri="direct:AgentQuotesRoute"/>
      	</get>
      
    </rest> -->
         	<rest path="/planlisting" consumes="application/json"  produces="application/json">
         	
			<post uri="/hello" type="com.demo.model.PlanListingRequest">
			        <to uri="direct:PlanListingRoute"/>
		      	</post>
	    </rest> 
    
    
<route id="direct:CheckResolveFromCache">
	<from uri="direct:CheckResolveFromCache"/>
	<log message="Entering CheckResolveFromCache"/>
	
	<to uri="bean:planListingCacheBean?method=getPlanListingFromCache(${body})"/>
	
	<log message="Leaving CheckResolveFromCache"/>
	<!-- <when>
            <simple>${header.inputParam} contains 'Y'</simple>
			<setHeader headerName="InCache">
		    	<constant>Y</constant>        
		  	</setHeader>
	</when>
	<when>
            <simple>${header.inputParam} contains 'N'</simple>
			<setHeader headerName="InCache">
		    	<constant>N</constant>        
		  	</setHeader>
	</when> -->
	
	<log message="Leaving CheckResolveFromCache"/>
</route>

	 <route id="direct:PlanListingRoute">
		<from uri="direct:PlanListingRoute"/>
			 <to uri="mock:getPlans"/>
			 <log message="Inside PlanListingRoute"/>
			<!--  <to uri="mock:getRatings"/> -->
	
	<!-- Check if for the request received can be resolved from the cache based on key from the request
	If YES , return from cache
	Otherwise, fetch response as required based on the request
	Cache the response and return it with a key based on the request
	 -->
	
			<!-- <to uri="bean:planListingClientBean?method=getPlanListingByPlanUserDemographicsAndProductsForQuote(${body})"/> -->
			
			
		<!-- 	Check the header value
			If header value is "N" then
				Proceed with execution of Orchestration Logic
				Set the return from execution of Orchestration logic in cache
			endif
		 -->	
	
			 <!-- Get List of Plans based on User Demographics and Product Selection -->
			<!-- <to uri="bean:planClientBean?method=getPlansByUserDemographicsAndProductsForQuote()"/> -->
			
			<!-- Get Ratings for Plan , User Demographics and Product Selection-->
			<!-- <to uri="bean:ratingClientBean?method=getRatingsByPlanUserDemographicsAndProductsForQuote()"/> -->
			
	<!-- 	<log message="Leaving PlanListingRoute"/> -->
		
	</route>


<!--     
<route id="QuoteDetailsRoute">
	
	<from uri="direct:QuoteDetailsRoute"/>
	
	<log message="Entering QuoteDetailsRoute"/>

		<to uri="bean:quoteClientBean?method=getQuoteClientsByQuoteReferenceNumber(${header.id})"/>
		<to uri="bean:planClientBean?method=getPlanDetailsByPlanNumber(${header.id})"/>
	
	<log message="Leaving QuoteDetailsRoute"/>
	
</route>
 -->
    
    
    <!-- <rest path="/agent" consumes="application/json" produces="application/json">
      <description>Agent rest service</description>
      
		<get uri="/{id}">
	        <description>Find agent Details by id</description>
	        <to uri="direct:AgentRoute"/>
      	</get>
      
      
    </rest> -->
    
     
    
   <!--  <rest path="/quoteinter" consumes="application/json" produces="application/json">
      <description>Quote Rest service</description>
		<get uri="/{id}">
	        <description>Find Quote Details by id</description>
	        <to uri="direct:QuoteWithInterceptorsRoute"/>
      	</get>
      
      
    </rest> -->
    
<!-- 	<rest path="/AgentEnrollment" consumes="application/json" produces="application/json">
      <description>Agent Enrollment rest service</description>
      <get uri="/{id}">
        <description>Find agent Details and his/her Enrolment List by Agent id</description>
      	<to uri="direct:AgentEnrollmentRoute"/>
      </get>
      
	</rest>
 -->

<!-- <route id="AgentEnrollmentRoute">
	<from uri="direct:AgentEnrollmentRoute"/>
	
	<log message="Entering AgentEnrollmentRoute"/>
	
	<multicast stopOnException="true" strategyRef="MyAggregatorStrategy">
		<to uri="bean:agentClientBean?method=getAgentDetails(${header.id})"/>
		<to uri="bean:enrollmentClientBean?method=getEnrollmentsByAgentId(${header.id})"/>
	</multicast>
	
	<log message="Leaving AgentEnrollmentRoute"/>
	
</route>

<route id="AgentRoute">
	<from uri="direct:AgentRoute"/>
	<log message="Entering agentRoute..."/>
	<to uri="bean:agentClientBean?method=getAgentDetails(${header.id})"/>
	<log message="Leaving agentRoute."/>
</route>

<route id="QuoteRoute">
	<from uri="direct:QuoteRoute"/>
	<log message="Entering QuoteRoute..."/>
	
	 
	<to uri="bean:quoteCacheBean?method=getQuoteDetailsByQuoteId(${header.id})"/>
	
	
	<to uri="direct:CheckQuoteCacheRoute"/>
	
	<log message="cache status: ${in.header.InCache}"/>
	
	<when>
		<simple>${in.header.InCache} == 'NO'</simple>
		<log message="Not Available in Cache..."/>
		<log message="Fetching from Service/DB..."/>
		<to uri="bean:quoteClientBean?method=getQuoteDetailsByQuoteId(${header.id})"/>
		Service return in JSON ,So convert JSON to JAVA so that we can add to Cache
		<unmarshal ref="gson"/>
		<to uri="bean:quoteCacheBean?method=addQuoteByQuoteId(${body})"/>
		Convert Java to JSON so that we can send JSON to client
		<marshal ref="gson"/>
		
	</when>
	
	<log message="Leaving quoteRoute."/>
</route>

 <route id="QuoteWithInterceptorsRoute">
	<from uri="direct:QuoteWithInterceptorsRoute"/>
	<log message="Entering QuoteWithInterceptorsRoute..."/>
	
	<interceptFrom>
        <to uri="direct:CheckQuoteCacheRoute"/>
    </interceptFrom>
    
    <when>
		<simple>${in.header.InCache} == 'YES'</simple>
	    <stop/>
	</when>
    
	<log message="Not Available in Cache..."/>
	<log message="Fetching from Service/DB..."/>
	
	<to uri="bean:quoteClientBean?method=getQuoteDetailsByQuoteId(${header.id})"/>
	
	Service Returns in JSON ,So convert JSON to JAVA so that we can add to Cache
	<unmarshal ref="gson"/>
	
	Add Response to Cache 
	<to uri="bean:quoteCacheBean?method=addQuoteByQuoteId(${body})"/>
	
	 Convert Java to JSON so that we can send JSON to client
	<marshal ref="gson"/>
	
	<log message="Leaving QuoteWithInterceptorsRoute"/>
	
</route>


<route id="CheckQuoteCacheRoute">
	<from uri="direct:CheckQuoteCacheRoute"/>
	<log message="Entering CheckQuoteCacheRoute..."/>
	<to uri="bean:quoteCacheBean?method=getQuoteDetailsByQuoteId(${header.id})"/>
	<log message="Leaving CheckQuoteCacheRoute..."/>
</route>
 -->
 </camelContext>

</beans>